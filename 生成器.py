###   生成器

# 生成器： 本质就是迭代器
# 迭代器和生成器区别：1. 迭代器是python内置的
#                   2. 生成器是程序员人为定义的

# 生成器的作用：  1.节省空间
#                2.保留执行位置
#                3.迭代形式一个个去执行，并保留当前的位置。
# 生成器的定义：  1.基于函数
#                2.基于生成器表达式

# 生成器的作用：当数据量较大的时候，建议使用生成器

# 当函数体中有yield 就是一个生成器

# yield 是将对象整个返回，
# yield from是将可迭代的对象逐个返回


# def func():
#     yield 1  # 将值返回并记录执行的位置
# g = func()   # 产生一个生成器
# print(g.__next__())  # 触发生成器执行

# 区分生成器和迭代器： 1.有yield是生成器
#                    2.生成器是自己写的，迭代器是内置的
#                    3.通过对象内存地址
#                    4.通过send方法来判断，只有生成器具有send方法

def foo():
    lst = [i for i in range(10)]
    for i in lst:
        yield i    #  阻塞 -- 停顿 -- 等待
g = foo()
print(g.__next__())


def func():
    lst = [1,3,4,5,6,7,8]
    yield from lst
t = func()
for i in t:
    print(i)